version: "2.4"

services:
  mongo:
    image: "mongo:4.2"
    command: mongod --wiredTigerCacheSizeGB 1.5 --bind_ip_all --keyFile=mongodb.key --replSet noc --port 27017
    entrypoint:
      - sh
      - -c
      - |
        chmod 600 mongodb.key
        chown 999:999 mongodb.key
        exec docker-entrypoint.sh $$@
    volumes:
      - ./files/mongo-init.js:/docker-entrypoint-initdb.d/01mongo-init.js
      - ./files/mongodb.key:/mongodb.key
      - type: tmpfs
        target: /data/db
        tmpfs:
          size: "512M"
    environment:
      MONGO_INITDB_DATABASE: noc
      MONGO_INITDB_ROOT_USERNAME: noc
      MONGO_INITDB_ROOT_PASSWORD: noc

  mongodb-repl-set-init:
    image: "mongo:4.2"
    depends_on:
      mongo:
        condition: service_started
    volumes:
      - ./files/rs-init.sh:/rs-init.sh
    environment:
      MONGO_INITDB_ROOT_USERNAME: noc
      MONGO_INITDB_ROOT_PASSWORD: noc
      MONGO_REPL_SET_NAME: noc
      MONGO_REPL_SET_HOSTS: mongo
    entrypoint: sh /rs-init.sh
    healthcheck:
      test: [ "CMD", "grep", "healthy", "/tmp/job_is_done" ]
      interval: 3s
      timeout: 3s
      retries: 100

  postgres:
    image: "postgres:14"
    environment:
      POSTGRES_USER: noc
      POSTGRES_DB: noc
      POSTGRES_PASSWORD: noc
    volumes:
      - type: tmpfs
        target: /data
        tmpfs:
          size: "512M"
    command: -c fsync=off
    healthcheck:
      test:
        [
          "CMD",
          "su",
          "-",
          "postgres",
          "-c",
          "psql -U noc -l | grep noc"
        ]
      interval: 3s
      timeout: 3s
      retries: 100

  kafka:
    image: bitnami/kafka:3.6.2
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER    
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false

  pytests:
    build:
      context: ../
      dockerfile: Dockerfile
      target: dev
    restart: "no"
    working_dir: /opt/noc
    depends_on:
      postgres:
        condition: service_healthy
      mongodb-repl-set-init:
        condition: service_healthy
      clickhouse:
        condition: service_started
      kafka:
        condition: service_started
      telnetd:
        condition: service_started
      sshd:
        condition: service_started
      dropbear:
        condition: service_started
      snmpd:
        condition: service_started
    command: >
      sh -c "set -xe && ./noc test run --junit-report=build/reports/py-test-junit.xml --statistics "
    environment:
      NOC_TEST_DB: noc_tests
    env_file:
      - noc.conf
    volumes:
      - type: volume
        source: build
        target: /opt/noc/build

  clickhouse:
    image: yandex/clickhouse-server:latest

  memcached:
    image: memcached:alpine

  redis:
    image: redis:5-alpine

  sshd:
    image: "registry.getnoc.com/infrastructure/tests/testsshd:master"
    command: /usr/sbin/sshd -D -e -4

  dropbear:
    image: "registry.getnoc.com/infrastructure/tests/testdropbear:master"
    command: /usr/sbin/dropbear -F -E

  telnetd:
    image: "registry.getnoc.com/infrastructure/tests/testtelnetd:master"
    command: /usr/sbin/telnetd -F

  snmpd:
    image: "registry.getnoc.com/infrastructure/tests/testsnmpd:master"
    command: "/usr/sbin/snmpd -f -Lo: -d -a udp:161"

volumes:
  build:
