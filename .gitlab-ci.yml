---
stages:
  - Lint
  - Prebuild
  - Test
  - Build
  - Upload

include:
  - project: "noc/common-jobs"
    ref: stable
    file:
      - /templates/upload.yml
  - local: /ansible/.ansible-ci.yml

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

#Linters section
check labels:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - FLIST=$(git --no-pager diff --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA)
    - python ./scripts/check-labels.py --verbose --junit-report=build/reports/labels-junit.xml $FLIST
  only:
    - merge_requests
  tags:
    - docker
  artifacts:
    reports:
      junit: ./build/reports/labels-junit.xml
    expire_in: 7 days
  allow_failure: true
  retry: 2

py-lint:
  stage: Lint
  image: python:3.11-bullseye
  script:
    - set -x
    # Install python dependencies
    - pip install --upgrade pip
    - pip install -r .requirements/lint.txt
    # Create directory for reports
    - mkdir -p build/reports
    # Check formatting
    - black --target-version py310 --check --diff . 2>&1 | ./scripts/ci/black-junit.py --tee --output=build/reports/junit-black.xml
    - STATUS_BLACK=$?
    # Ruff linter
    - ruff check --diff -q . # To see stdout in joblog
    - ruff -q --format=junit . > build/reports/junit-ruff.xml
    - STATUS_RUFF=$?
    # Final result
    - test $STATUS_BLACK -a $STATUS_RUFF
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
      - ".requirements/*.txt"
      - ".gitlab-ci.yml"
      - "pyproject.toml"
  tags:
    - docker
  artifacts:
    reports:
      junit: ./build/reports/junit-*.xml
    expire_in: 7 days
  allow_failure: false

mypy:
  stage: Lint
  image: registry.getnoc.com/infrastructure/noc-py-lint:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep ".py$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        mypy --follow-imports=skip --ignore-missing-imports $FLIST;
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.py"
      - "**/*.py"
  tags:
    - docker
  allow_failure: true

eslint:
  stage: Lint
  image: node:22-bookworm
  script:
    - set -x
    - export ESLINT_USE_FLAT_CONFIG=false
    # Get list of changed files
    # @todo: Deprecated, remove in future
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep "\.js$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        npm install -g eslint
        eslint $FLIST
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.js"
      - "**/*.js"
  tags:
    - docker
  allow_failure: true

prettier:
  stage: Lint
  image: registry.getnoc.com/infrastructure/prettier:master
  script:
    - set -x
    - FLIST=$(git --no-pager diff --diff-filter=d --name-only $(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME) $CI_COMMIT_SHA  | egrep "\.(js|json|yml|css|md)$" | grep -v ".docker/"|| true)
    - >
      if [ ! -z "$FLIST" ];
      then
        /usr/local/bin/prettier --config=.prettierrc --check $FLIST
      else
        echo "No files to lint"
        true;
      fi
  only:
    refs:
      - merge_requests
    changes:
      - "*.json"
      - "*.css"
      - "*.yml"
      - "*.md"
      - "**/*.json"
      - "**/*.css"
      - "**/*.yml"
      - "**/*.md"
  tags:
    - docker
  allow_failure: false

# Test python code section
py:test:
  stage: Test
  before_script:
    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests
    - mv .dockerignore .dockerignore.prod
    - cp .dockerignore.tests .dockerignore
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    # see docker/docker-compose.yml for complete list of migrations
    - ls -al
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      build pytests
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      up
      --exit-code-from pytests
      pytests
  after_script:
    - DOCKER_COMPOSE_PROJECT=${CI_COMMIT_REF_SLUG}-${CI_JOB_ID}-pytests
    - JUNIT_XML_REPORT=build/reports/py-test-junit.xml
    - mkdir -p build/reports/
    - >
      docker cp
      "${DOCKER_COMPOSE_PROJECT}_pytests_1:/opt/noc/${JUNIT_XML_REPORT}"
      "${JUNIT_XML_REPORT}"
    - mv .dockerignore.prod .dockerignore
    - >
      docker-compose
      -f .docker/docker-compose.yml
      -p "${DOCKER_COMPOSE_PROJECT}"
      down -v
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - "*.py"
        - "**/*.py"
        - requirements.txt
        - "**/*.json"
  tags:
    - shell
  allow_failure: false
  artifacts:
    reports:
      junit: ./build/reports/py-test-junit.xml
    expire_in: 7 days

# Build Docs section
build:Docs:
  stage: Build
  environment: docs
  image: python:3.11-bullseye
  script:
    - set -e -x
    - pip3 install -r .requirements/docs.txt
    - mkdocs build
    - python3 scripts/docs/minify.py
  tags:
    - docker
  artifacts:
    paths:
      - build/docs
    expire_in: 2 hours
  rules:
    - if: ('$CI_PIPELINE_SOURCE == "merge_request_event"' || '$CI_COMMIT_BRANCH == "master"')
      changes:
        - "docs/*"
        - "docs/**/*"
        - "mkdocs.yml"
        - "macros.py"
        - ".requirements/docs.txt"

#Build Image section
build:Release Image:
  stage: Build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # registry.getnoc.com/noc/noc/code:stable
    - docker build --target code -t $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG -f Dockerfile .
    # registry.getnoc.com/noc/noc/dev:stable
    - docker build --target dev -t $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG -f Dockerfile .
    # registry.getnoc.com/noc/noc/static:stable
    - docker build --target static -t $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG
    - docker rmi $CI_REGISTRY_IMAGE/code:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/dev:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE/static:$CI_COMMIT_TAG
  tags:
    - shell
  only:
    - tags

build:Master Image:
  stage: Build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # registry.getnoc.com/noc/noc/code:stable
    - docker build --target code -t $CI_REGISTRY_IMAGE/code:master -f Dockerfile .
    # registry.getnoc.com/noc/noc/dev:stable
    - docker build --target dev -t $CI_REGISTRY_IMAGE/dev:master -f Dockerfile .
    # registry.getnoc.com/noc/noc/static:stable
    - docker build --target static -t $CI_REGISTRY_IMAGE/static:master -f Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/code:master
    - docker push $CI_REGISTRY_IMAGE/dev:master
    - docker push $CI_REGISTRY_IMAGE/static:master
    - docker rmi $CI_REGISTRY_IMAGE/code:master $CI_REGISTRY_IMAGE/dev:master $CI_REGISTRY_IMAGE/static:master
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $BUILD_MASTER == "true"'
  tags:
    - shell

#Build web section
build:web:
  stage: Build
  image: node:12
  script:
    - cd scripts/build/web
    - npm install
    - node src/index.js
  tags:
    - docker
  only:
    refs:
      - merge_requests
    changes:
      - "ui/web/**/*.js"
      - "ui/web/**/*.css"
      - "scripts/build/web/**/*"
  artifacts:
    paths:
      - dist/ui/pkg/web
      - dist/ui/pkg/web.debug

.build_rust:
  image: rust:1.63
  script:
    - set -x
    - cd rust/$BUILD_TARGET
    - export CARGO_TARGET_DIR=../../build/rust
    - cargo check
    - cargo test
    - cargo build --release
  rules:
    - if: ('$CI_PIPELINE_SOURCE == "merge_request_event"' || '$CI_COMMIT_BRANCH == "master"')
      changes:
        - rust/$BUILD_TARGET/*
        - rust/$BUILD_TARGET/**/*
  tags:
    - docker
  artifacts:
    paths:
      - build/rust/release
    expire_in: 7 days

# Upload section
upload docs:
  stage: Upload
  environment: docs
  extends: .upload
  variables:
    SOURCE: build/docs/*
    DEST: cdn/$S3_BUCKET/
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "docs/*"
        - "docs/**/*"
        - "mkdocs.yml"
        - "macros.py"
        - ".requirements/docs.txt"
