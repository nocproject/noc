---
- name: Prepare
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Expose cache variable
      set_fact:
        use_cache: "{{ lookup('env', 'USE_CACHE') | bool if lookup('env', 'USE_CACHE') is defined else true }}"

    - name: Ensure unattended-upgrades is disabled and removed
      block:
        - name: Configure APT to disable periodic updates
          lineinfile:
            path: /etc/apt/apt.conf.d/20auto-upgrades
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            create: true
          loop:
            - regexp: '^APT::Periodic::Update-Package-Lists'
              line: 'APT::Periodic::Update-Package-Lists "0";'
            - regexp: '^APT::Periodic::Unattended-Upgrade'
              line: 'APT::Periodic::Unattended-Upgrade "0";'

        - name: Ensure unattended-upgrades config is disabled (comment Allowed-Origins)
          lineinfile:
            path: /etc/apt/apt.conf.d/50unattended-upgrades
            regexp: "{{ item.regexp }}"
            line: "{{ item.line }}"
            backup: true
            create: true  # Still safe here: commenting out = harmless
          loop:
            - regexp: '^\s*Unattended-Upgrade::Allowed-Origins'
              line: '//Unattended-Upgrade::Allowed-Origins {};'
            - regexp: '^\s*Unattended-Upgrade::Origins-Prohibited'
              line: '//Unattended-Upgrade::Origins-Prohibited {};'

        - name: Stop and disable unattended-upgrades service
          systemd:
            name: unattended-upgrades
            state: stopped
            enabled: false
          ignore_errors: true

        - name: Remove unattended-upgrades package
          apt:
            name: unattended-upgrades
            state: absent
            autoremove: true
            purge: true

        - name: Wait 10 seconds after cleanup
          wait_for:
            timeout: 10
      when:
        - molecule_yml.platforms[0].distr is match("ubuntu.*")

    - name: Download caches
      import_tasks: cache_download.yml
      when: use_cache
