---
- name: gather py3 facts
  vars:
    ansible_python_interpreter: /usr/bin/python3
  setup:
    gather_subset:
      - "min"

- name: Check if we have python in NOC/bin/ folder
  stat:
    path: "{{ noc_root }}/bin/python"
  register: noc_bin_python_path

- name: Check noc Python version
  shell: "{{ noc_root|quote }}/bin/python -V | cut -d' ' -f 2"
  register: noc_python_existing_version
  when:
    - noc_bin_python_path.stat.exists

- name: Strip existing noc python version
  set_fact:
    noc_python_existing_family_version: "{{ noc_python_existing_version.stdout.split('.')[:2] | join('.') }}"
  when:
    - noc_python_existing_version is defined and noc_python_existing_version and noc_bin_python_path.stat.exists

- name: Check if we have system Python of {{ noc_py3_ver }} version
  register: system_python3_path
  stat:
    path: "/usr/bin/python{{ noc_py3_ver }}"

- name: Check system Python version
  shell: /usr/bin/python{{ noc_py3_ver|quote }} -V | cut -d' ' -f 2
  register: system_python3_version
  when: system_python3_path.stat.exists

- name: Strip existing noc python version
  set_fact:
    system_python3_existing_family_version: "{{ system_python3_version.stdout.split('.')[:2] | join('.') }}"
  when:
    - system_python3_version is defined and system_python3_path.stat.exists

# If there is a system python with needed family (3.X)
- name: We'll try to use system's python
  set_fact:
    noc_init_python_path: system_python3_path
  when:
    - system_python3_version.stdout is defined
    - system_python3_existing_family_version is defined
    - system_python3_existing_family_version == noc_py3_ver

# In all other cases we bring our own python
- name: We'll try to use own python
  set_fact:
    noc_init_python_path: "/opt/python{{ noc_py3_ver }}/bin/python"
  when:
    - noc_init_python_path is not defined

# Archive whole directory with old python2.* version and then delete folder's content
- block:
    - name:
      include_tasks: "clean_dir.yml"

    - name: Bring Python of {{ noc_py3_ver }} version when system's python differs
      include_tasks: "bring_python.yml"

    - name: Set py_install marker 1
      set_fact:
        is_python_installed: "True"

  when:
    - noc_python_existing_family_version is defined
    - noc_python_existing_family_version[:1] == '2'

# When existing python is 3.* version
- block:
    - block:  # When target version equals system
        - name: Recreate noc dirs
          include_tasks: "clean_dir.yml"
          when:
            - noc_python_existing_family_version is defined
            - noc_python_existing_family_version != system_python3_version.stdout

        - name: Set py_install marker 2
          set_fact:
            is_python_installed: "True"

      when:
        - system_python3_existing_family_version is defined
        - system_python3_existing_family_version == noc_py3_ver

    - block:  # When Target version not equals system and installed python not equals needed
        - name: Recreate noc dirs
          include_tasks: "clean_dir.yml"
          when:
            - noc_python_existing_version is defined
            - noc_python_existing_version != py_rel_name

        - name: Bring Python of {{ noc_py3_ver }} version when system's python differs
          include_tasks: "bring_python.yml"

        - name: Set py_install marker 3
          set_fact:
            is_python_installed: "True"

      when:
        - noc_python_existing_family_version != noc_py3_ver

  when:
    - noc_python_existing_family_version is defined
    - noc_python_existing_family_version[:1] == '3'

# Install python in all other cases
- block:
    - name: Bring Python of {{ noc_py3_ver }} version when no good python on node
      include_tasks: "bring_python.yml"

    - name: Set install marker 4
      set_fact:
        is_python_installed: "True"

  when:
    - noc_python_existing_family_version is not defined
    - is_python_installed is not defined

- block:
    - name: "Python{{ noc_py3_ver }} | Download precompiled openssl archive"
      get_url:
        url: "{{ noc_python_openssl_url }}"
        dest: "{{ noc_dist }}/openssl.tar.gz"
      environment:
        https_proxy: "{{ http_proxy }}"
        http_proxy: "{{ http_proxy }}"

    - name: Create dirs for Python's archives
      file:
        path: "/opt/openssl"
        state: directory
        mode: "0755"

    - name: "Python{{ noc_py3_ver }} | Uncompress openssl"
      unarchive:
        src: "{{ noc_dist }}/openssl.tar.gz"
        dest: "/opt/openssl"
        creates: "/opt/openssl/bin/openssl"
        remote_src: true

  when:
    - ansible_distribution in ['RedHat', 'CentOS']
    - ansible_distribution_version is version(8, '<')

- name: Initialize virtualenv3
  pip:
    chdir: "{{ noc_root }}"
    name: "pip"
    virtualenv: "{{ noc_root }}"
    virtualenv_command: "{{ noc_init_python_path }} -m venv"
    state: "latest"
  environment:
    https_proxy: "{{ http_proxy }}"
    http_proxy: "{{ http_proxy }}"
    LC_ALL: C

- name: Install wheel
  pip:
    name: wheel
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
    state: present
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Upgrade setuptools
  pip:
    name: setuptools
    chdir: "{{ noc_root }}"
    virtualenv: "{{ noc_root }}"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Uninstall bad python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/reverted_modules.xtx
    virtualenv: "{{ noc_root }}"
    state: absent
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Install -activator- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/activator.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-activator-exec' in groups and inventory_hostname in groups['svc-activator-exec']"
  tags:
    - requirements

- name: Install -classifier- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/classifier.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-classifier-exec' in groups and inventory_hostname in groups['svc-classifier-exec']"
  tags:
    - requirements

- name: Install -login- python packages 1
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/login-ldap.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - login_methods is defined and 'ldap' in login_methods
  tags:
    - requirements

- name: Install -login- python packages 2
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/login-radius.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - login_methods is defined and 'radius' in login_methods
  tags:
    - requirements

- name: Install -supervisor- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/supervisor.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tags:
    - requirements

- name: Install -prod-tools- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/prod-tools.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - noc_env_type == "prod"
  tags:
    - requirements

- name: Install -sentry- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/sentry.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - noc_install_sentry
  tags:
    - requirements

- name: Install -memcached- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/cache-memcached.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-memcached-exec' in groups and groups['svc-memcached-exec']|length>0 "
  tags:
    - requirements

- name: Install -redis- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/cache-redis.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-redis-exec' in groups and groups['svc-redis-exec']|length>0"
  tags:
    - requirements

- name: Install -kafka- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/sender-kafka.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-kafkasender-exec' in groups and inventory_hostname in groups['svc-kafkasender-exec']"
  tags:
    - requirements

- name: Install -ping- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/ping.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-ping-exec' in groups and inventory_hostname in groups['svc-ping-exec']"
  tags:
    - requirements

- name: Install -node- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/node.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
    PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgres_version }}/bin/"
  tags:
    - requirements

- name: Install -bh- python packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: ./.requirements/bh.txt
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  when:
    - "'svc-bh-exec' in groups and inventory_hostname in groups['svc-bh-exec']"
  tags:
    - requirements

- name: Ensure that noc.pth is absent
  file:
    path: "{{ noc_root }}/lib/python{{ noc_py3_ver }}/site-packages/noc.pth"
    state: absent
