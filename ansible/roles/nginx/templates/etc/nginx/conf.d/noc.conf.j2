{% if ansible_distribution == "FreeBSD" %}
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
{% endif %}

{% if noc_config["services"].get("web", []) %}
upstream noc-web {
{% for n in noc_config["services"].get("web", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("login", []) %}
upstream login {
{% for n in noc_config["services"].get("login", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("card", []) %}
upstream card {
{% for n in noc_config["services"].get("card", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("mrt", []) %}
upstream mrt {
{% for n in noc_config["services"].get("mrt", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("bi", []) %}
upstream bi {
{% for n in noc_config["services"].get("bi", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("notebook", []) %}
upstream notebook {
{% for n in noc_config["services"].get("notebook", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("grafana", []) %}
upstream grafana {
{% for n in noc_config["services"].get("grafana", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}

{% if noc_config["services"].get("grafanads", []) %}
upstream grafanads {
{% for n in noc_config["services"].get("grafanads", []) %}
    server {{ n }};
{% endfor %}
}
{% endif %}


{% if noc_config["config"].get("nginx-global-%s" % ansible_hostname, {}).get("logging") %}
log_format noc_format '{ "@timestamp": "$time_iso8601", '
                         '"@fields": { '
                         '"remote_addr": "$remote_addr", '
                         '"remote_user": "$remote_user", '
                         '"body_bytes_sent": "$body_bytes_sent", '
                         '"request_time": "$request_time", '
                         '"status": "$status", '
                         '"request": "$request", '
                         '"request_method": "$request_method", '
                         '"http_referrer": "$http_referer", '
                         '"request_time": "$request_time", '
                         '"upstream_addr": "$upstream_addr",'
                         '"upstream_response_time": "$upstream_response_time", '
                         '"http_user_agent": "$http_user_agent" } }';
{% else %}
log_format noc_format '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" '
    '$upstream_addr '
    '$request_time $upstream_response_time $pipe';

{% endif %}

{% if noc_config["config"].get("nginx-global-%s" % ansible_hostname, {}).get("http_redirect") %}
server {
    listen 80;
    server_name {{ noc_web_host }};
    location / {
        return 301 https://{{ noc_web_host }}$request_uri;
    }
}
{% endif %}

server {
    listen 443;
    server_name {{ noc_web_host }};
    ssl on;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_certificate {{ nginx_ssl_cert_path }};
    ssl_certificate_key {{ nginx_ssl_key_path }};
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains";
    add_header X-Content-Type-Options nosniff;
    add_header X-Backend-Server $upstream_addr;
    add_header X-Front-Server $hostname;
    ssl_stapling on;
    ssl_stapling_verify on;

    client_max_body_size 8m;

    access_log  {{ nginx_log_dir }}/noc.access.log noc_format;
    error_log  {{ nginx_log_dir }}/noc.error.log;

    # Proxy authentication settings
    error_page 401 = @error401;

    location @error401 {
        return 302 /api/login/?uri=$request_uri;
    }

    location /ng_stats {
        stub_status;
{% for ip in ansible_all_ipv4_addresses %}
        allow {{ ip }};
{% endfor %}
        deny all;
    }

{% if noc_config["services"].get("login", []) %}
    # Login service api
    location /api/auth/ {
        internal;
        proxy_pass http://login;
        rewrite  ^/api/auth/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Content-Length '0';
        access_log  {{ nginx_log_dir }}/auth.access.log noc_format;
    }

    # Login service api
    location /api/login/ {
        proxy_pass http://login;
        rewrite  ^/api/login/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Original-URI $request_uri;
        access_log  {{ nginx_log_dir }}/login.access.log noc_format;
    }
{% endif %}

{% if noc_config["services"].get("card", []) %}
    # Card service api
    location /api/card/ {
        proxy_pass http://card;
        auth_request /api/auth/auth/;
        rewrite  ^/api/card/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
        access_log  {{ nginx_log_dir }}/card.access.log noc_format;
    }
{% endif %}

{% if noc_config["services"].get("mrt", []) %}
    # mrt service api
    location /api/mrt/ {
        proxy_pass http://mrt;
        auth_request /api/auth/auth/;
        # rewrite  ^/api/mrt/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
        access_log  {{ nginx_log_dir }}/mrt.access.log noc_format;
    }
{% endif %}

{% if noc_config["services"].get("bi", []) %}

    # bi service api
    location /api/bi/ {
        proxy_pass http://bi;
        auth_request /api/auth/auth/;
        rewrite  ^/api/bi/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
    }
{% endif %}

{% if noc_config["services"].get("grafanads", []) %}

    # grafanads service api
    location /api/grafanads/ {
        proxy_pass http://grafanads;
        auth_request /api/auth/auth/;
        rewrite  ^/api/grafanads/(.*)  /$1 break;
        # internal;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
    }
{% endif %}

    # Legacy django media
    location ^~ /media/ {
        alias {{ noc_root }}/django/contrib/admin/static/;
        gzip on;
        gzip_types text/css text/x-js;
    }

    # Legacy static resources
    location ^~ /static/ {
        alias {{ noc_root }}/static/;
        gzip on;
        gzip_types text/css text/x-js;
    }

    # Minified JS files
    location ^~ /ui/cache/ {
        alias {{ noc_root }}/var/ui/cache/;
        gzip on;
        gzip_types text/css text/x-js;
    }

    # UI files
    location ^~ /ui/ {
        alias {{ noc_root }}/ui/;
        gzip on;
        gzip_types text/css text/x-js;
    }

{% if noc_config["services"].get("notebook", []) %}
    location ~* ^/notebook/(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/? {
        proxy_pass http://notebook;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        # Websockets support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        access_log  {{ nginx_log_dir }}/notebook.access.log noc_format;
    }

    location /notebook {
        proxy_pass http://notebook;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        access_log  {{ nginx_log_dir }}/notebook.access.log noc_format;
    }
{% endif %}

{% if noc_config["services"].get("grafana", []) %}
    location /ui/grafana {
        proxy_pass http://grafana;
        auth_request /api/auth/auth/;
        rewrite  ^/ui/grafana/(.*)  /$1 break;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
        access_log  {{ nginx_log_dir }}/grafana.access.log noc_format;
    }
{% endif %}

    location / {
        rewrite ^/$ /main/desktop/;
        proxy_pass http://noc-web;
        auth_request /api/auth/auth/;
        proxy_read_timeout 900;
        gzip on;
        gzip_types text/css text/x-js;
        proxy_set_header Host $http_host;
        proxy_set_header X-Scheme $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        auth_request_set $user $upstream_http_remote_user;
        proxy_set_header Remote-User $user;
        auth_request_set $groups $upstream_http_remote_groups;
        proxy_set_header Remote-Groups $groups;
    }
}
{% if ansible_distribution == "FreeBSD" %}
}
{% endif %}
