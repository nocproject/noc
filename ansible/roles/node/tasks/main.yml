#
# node role tasks
#
---
- name: Setup hostname
  hostname: name="{{ inventory_hostname }}"
  when: "'Linux' in ansible_system"

- name: Setup /etc/hosts
  lineinfile:
    dest: /etc/hosts
    line: "{{ hostvars[item].ansible_host }} {{ item }}"
    regexp: ".*{{ item }}"
  with_items: "{{ groups['nodes'] }}"
  tags:
    - config

- name: "Include OS-specific tasks"
  include: "os/{{ ansible_distribution }}/main.yml"

- name: Create NOC group
  group:
    name: "{{noc_group}}"
    state: present

- name: Create NOC user
  user:
    name: "{{noc_user}}"
    group: "{{noc_group}}"
    comment: "NOC user"
    state: present

- name: Clean NOC directory
  hg:
    repo: "{{noc_repo}}"
    dest: "{{noc_root}}"
    revision: "{{noc_revision}}"
    force: yes
    purge: yes
  when: "'prod' in noc_env_type and noc_env_type is defined"
  environment:
    LC_ALL: C
  tags:
    - mercurial

- name: Pull NOC
  hg:
    repo: "{{noc_repo}}"
    dest: "{{noc_root}}"
    revision: "{{noc_revision}}"
    update: yes
  environment:
    LC_ALL: C
  tags:
    - mercurial

- name: Pull NOC Customizations
  hg:
    repo: "{{ noc_custom_repo }}"
    dest: "{{ noc_root }}/custom"
    revision: "{{ noc_custom_revision }}"
    update: yes
    force: yes
    purge: yes
  when: "noc_custom_enabled==True and noc_custom_repo is defined and noc_custom_revision is defined"
  environment:
    LC_ALL: C
  tags:
    - mercurial

- name: Initialize virtualenv
  pip:
    chdir: "{{noc_root}}"
    name: "pip"
    virtualenv: "{{ noc_root }}"
    state: "present"
  environment:
    https_proxy: "{{http_proxy}}"
    http_proxy: "{{http_proxy}}"
    LC_ALL: C

- name: Fix broken PIP versions
  command: "{{ noc_root }}/scripts/deploy/fix-pip"
  args:
    chdir: "{{ noc_root }}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  environment:
    https_proxy: "{{http_proxy}}"

- name: Upgrade PIP
  pip:
    chdir: "{{noc_root}}"
    virtualenv: "{{noc_root}}"
    name: "pip"
    state: latest
  environment:
    http_proxy: "{{http_proxy}}"
    LC_ALL: C

- name: Upgrade setuptools
  pip:
    name: setuptools
    chdir: "{{noc_root}}"
    virtualenv: "{{noc_root}}"
    state: latest
  environment:
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
  tags:
    - requirements

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Revert local patches
  command: "{{ noc_root }}/scripts/deploy/apply-patches --revert"
  args:
    chdir: "{{ noc_root }}"

- name: Calculate md5 of node requirements
  stat: path="{{noc_root}}/requirements/node.txt"
  register: node_stat
  tags:
    - requirements

- name: Check requirement files for changes
  command: test "{{ lookup('env', 'NOC_NODE_MD5') }}" = {{ node_stat.stat.md5 }}
  changed_when: "node_check.rc != 0"
  failed_when: node_check.stderr
  register: node_check
  tags:
    - requirements

- name: Install node python packages(should take a while for a first time)
  pip:
    chdir: "{{noc_root}}"
    requirements: "requirements/node.txt"
    virtualenv: "{{noc_root}}"
    extra_args: "--trusted-host cdn.getnoc.com --find-links https://cdn.getnoc.com/npkg/simple/ --upgrade"
  environment:
    PYCURL_SSL_LIBRARY: "{{ pycurl_ssl_library | default('openssl')}}"
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
    PATH: "{{ ansible_env.PATH }}:/usr/pgsql-{{ postgresql_version }}/bin/"
  when: node_check.changed
  tags:
    - requirements

- name: Install additional prod requirements
  pip:
    chdir: "{{noc_root}}"
    requirements: "requirements/prod.txt"
    virtualenv: "{{noc_root}}"
    extra_args: "--trusted-host cdn.getnoc.com --find-links https://cdn.getnoc.com/npkg/simple/ --upgrade"
  environment:
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
  when: "'prod' in noc_env_type"
  tags:
    - requirements

- name: Install python 2.6 compatibility packages
  pip:
    chdir: "{{ noc_root }}"
    requirements: "requirements/python-2.6.txt"
    virtualenv: "{{ noc_root }}"
    extra_args: "--upgrade"
  environment:
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
  when: "ansible_python_version.startswith('2.6')"
  tags:
    - requirements

- name: Install assets
  command: "{{ noc_root }}/scripts/deploy/install-packages requirements/{{ item }}.json"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"
  with_items: "{{ required_assets }}"
  environment:
    http_proxy: "{{http_proxy}}"
    https_proxy: "{{http_proxy}}"
  tags:
    - requirements

- name: Apply local patches
  command: "{{ noc_root }}/scripts/deploy/apply-patches"
  args:
    chdir: "{{ noc_root }}"

- name: Create required directories
  file:
    path: "{{noc_root}}/{{item.name}}"
    state: "directory"
    owner: "{{item.owner}}"
  with_items:
    - name: etc/config/
      owner: root
    - name: etc/config/supervisor
      owner: root
    - name: var/etc
      owner: root
    - name: var/db
      owner: root
    - name: var/log
      owner: "{{noc_user}}"
    - name: var/cp
      owner: "{{noc_user}}"
    - name: var/cp/crashinfo
      owner: "{{noc_user}}"
    - name: var/cp/crashinfo/new
      owner: "{{noc_user}}"
    - name: local
      owner: "{{noc_user}}"
    - name: var/run
      owner: "{{noc_user}}"
    - name: var/sock
      owner: "{{noc_user}}"
    - name: var/etc/noc
      owner: root
    - name: lib/python2.7/site-packages/__pycache__
      owner: "{{ noc_user }}"
    - name: var/reports
      owner: "{{noc_user}}"
    - name: var/bi
      owner: "{{noc_user}}"

- name: Install noc.pth
  template:
    src: "lib/python/site-packages/noc.pth.j2"
    dest: "{{noc_root}}/lib/python/site-packages/noc.pth"

- name: Check sitecustomize
  stat: path="{{noc_root}}/lib/python/site-packages/sitecustomize.py"
  register: sitecustomizes
  tags:
    - config

- name: Install sitecustomize.py
  template:
    src: "lib/python/site-packages/sitecustomize.py.j2"
    dest: "{{noc_root}}/lib/python/site-packages/sitecustomize.py"
  when: sitecustomizes.stat.exists == False
  tags:
    - config

- name: Update site.py
  replace: dest="{{noc_root}}/lib/python/site.py" regexp="encoding = \"ascii"\" replace="encoding = \"utf-8\""
  when: sitecustomizes.stat.exists == True

- name: Compile bytecode
  command: ./scripts/deploy/compile-bytecode
  args:
    chdir: "{{noc_root}}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  failed_when: "'ERROR' in result.stdout"

- name: Cleanup hanging .pyc files
  command: ./scripts/deploy/cleanup-pyc
  args:
    chdir: "{{noc_root}}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  failed_when: "'ERROR' in result.stdout"

- name: Compiling binary modules
  command: ./scripts/deploy/cythonize
  args:
    chdir: "{{noc_root}}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  failed_when: "'ERROR' in result.stdout"
  tags:
    - requirements

- name: Generate NOC config
  template:
    src: "etc/noc.yml.j2"
    dest: "{{ noc_root }}/etc/noc.yml"
  tags:
    - config

- name: Setup supervisor config
  template:
    src: "{{ item }}"
    dest: "{{ noc_root }}/{{ item[:-3] }}"
  with_items:
    - etc/config/supervisor/supervisord.conf.j2
    - etc/config/supervisor/supervisorctl.conf.j2
    - etc/config/supervisor/unix_http_server.conf.j2
  tags:
    - config

- name: create noc.conf
  file:
    state: touch
    name: "{{ noc_root }}/etc/noc.conf"
    owner: "{{ noc_user }}"
  tags:
    - config

- name: Set up noc.conf
  ini_file:
    dest: "{{noc_root}}/etc/noc.conf"
    section: "{{item.section}}"
    option: "{{item.option}}"
    value: "{{item.value}}"
    # works with ansible 2.2+ but brokes 2.1. have to be enabled in 2017
    #create: yes
  with_items:
    - section: main
      option: secret_key
      value: "{{ lookup('django_key', tower_data + '/noc/secret.key') }}"
    - section: database
      option: name
      value: "{{ noc_pg_db }}"
    - section: database
      option: user
      value: "{{ noc_pg_user }}"
    - section: database
      option: password
      value: "{{ noc_pg_password }}"
    - section: database
      option: host
      value: "{% for n in groups['svc-postgres-master'] %}{{n}}{% endfor %}"
    - section: nosql_database
      option: name
      value: "{{ noc_mongo_db }}"
    - section: nosql_database
      option: user
      value: "{{ noc_mongo_user }}"
    - section: nosql_database
      option: password
      value: "{{ noc_mongo_password }}"
    - section: nosql_database
      option: host
      value: "{{ groups['svc-mongod'] | join(',') }}"
    - section: nosql_database
      option: replica_set
      value: "{{ noc_mongo_replicaset }}"
    - section: customization
      option: installation_name
      value: "{{ noc_installation_name }}"
  tags:
    - config

- name: Tune sysctl.conf for node
  sysctl:
    name: "{{item.name}}"
    value: "{{item.value}}"
    state: present
    reload: yes
  with_items:
    - { name: 'net.ipv4.ip_local_port_range', value: '20024 65000'}
  tags:
    - config
  when: "'Linux' in ansible_system"

- name: install nsq
  include: "nsq.yml"
  tags:
    - nsq