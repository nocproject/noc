#
# node role tasks
#
---
- name: Setup /etc/hosts
  lineinfile: dest=/etc/hosts
              line="{{ hostvars[item].ansible_ssh_host }} {{ item }}"
              regexp=".*{{ item }}"
  with_items: groups["nodes"]

- include: "os/Debian/main.yml"
  when: ansible_distribution == "Debian"

- name: Create NOC group
  group: name="{{noc_group}}" state=present

- name: Create NOC user
  user: name="{{noc_user}}" group="{{noc_group}}" comment="NOC user" state=present

- name: Pull NOC
  hg: repo="{{noc_repo}}" dest="{{noc_root}}" revision="{{noc_revision}}"

- name: Upgrade PIP
  pip: >
    chdir="{{noc_root}}"
    executable="{{noc_root}}/bin/pip"
    virtualenv="{{noc_root}}"
    name="pip"
    state=latest

- name: Relink site-packages
  command: "{{ noc_root }}/scripts/deploy/link-site-packages"
  args:
    chdir: "{{ noc_root }}"
  register: s
  changed_when: "'CHANGED' in s.stdout"

- name: Revert local patches
  command: "{{ noc_root }}/scripts/deploy/apply-patches --revert"
  args:
    chdir: "{{ noc_root }}"

- name: Install python packages
  pip: >
    chdir="{{noc_root}}"
    executable="{{noc_root}}/bin/pip"
    requirements="requirements/node.txt"
    virtualenv="{{noc_root}}"
    extra_args="--trusted-host cdn.nocproject.org --find-links https://cdn.nocproject.org/pkg/simple/ --allow-all-external --upgrade"

- name: Apply local patches
  command: "{{ noc_root }}/scripts/deploy/apply-patches"
  args:
    chdir: "{{ noc_root }}"

- name: Create required directories
  file: path="{{noc_root}}/{{item.name}}" state="directory" owner="{{item.owner}}"
  with_items:
    - name: etc/config/
      owner: root
    - name: etc/config/supervisor
      owner: root
    - name: var/etc
      owner: root
    - name: var/db
      owner: root
    - name: var/log
      owner: "{{noc_user}}"
    - name: var/cp
      owner: "{{noc_user}}"
    - name: var/cp/crashinfo
      owner: "{{noc_user}}"
    - name: var/cp/crashinfo/new
      owner: "{{noc_user}}"
    - name: local
      owner: "{{noc_user}}"
    - name: var/run
      owner: "{{noc_user}}"
    - name: var/sock
      owner: "{{noc_user}}"
    - name: var/db/consul
      owner: "{{consul_user}}"
    - name: var/etc/consul
      owner: "{{consul_user}}"
    - name: var/etc/noc
      owner: root

- name: Install noc.pth
  template: src="lib/python/site-packages/noc.pth.j2" dest="{{noc_root}}/lib/python/site-packages/noc.pth"

- name: Check sitecustomize
  stat: path="{{noc_root}}/lib/python/site-packages/sitecustomize.py"
  register: sitecustomizes

- name: Install sitecustomize
  template: src="lib/python/site-packages/sitecustomize.py.j2" dest="{{noc_root}}/lib/python/site-packages/sitecustomize.py"
  when: sitecustomizes.stat.exists == False

- name: Update sitecustomize
  replace: dest="{{noc_root}}/lib/python/site-packages/sitecustomize.py" regexp="ascii" replace="utf-8"
  when: sitecustomizes.stat.exists == True

- name: Compile bytecode
  command: ./scripts/deploy/compile-bytecode
  args:
    chdir: "{{noc_root}}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  failed_when: "'ERROR' in result.stdout"

- name: Cleanup hanging .pyc files
  command: ./scripts/deploy/cleanup-pyc
  args:
    chdir: "{{noc_root}}"
  register: result
  changed_when: "'CHANGED' in result.stdout"
  failed_when: "'ERROR' in result.stdout"

- name: Generate NOC config
  copy: content="{{ noc_config | to_nice_json}}" dest="{{ noc_root }}/etc/noc.json"

- name: Setup supervisor config
  template: src="{{ item }}" dest="{{ noc_root }}/{{ item[:-3] }}"
  with_items:
    - etc/config/supervisor/supervisord.conf.j2
    - etc/config/supervisor/supervisorctl.conf.j2
    - etc/config/supervisor/unix_http_server.conf.j2

- name: Set up noc.conf
  ini_file: dest="{{noc_root}}/etc/noc.conf"
            section="{{item.section}}"
            option="{{item.option}}" value="{{item.value}}"
  with_items:
    - section: main
      option: secret_key
      value: "{{ lookup('django_key', tower_data + '/noc/secret.key') }}"
    - section: database
      option: name
      value: "{{ noc_pg_db }}"
    - section: database
      option: user
      value: "{{ noc_pg_user }}"
    - section: database
      option: password
      value: "{{ noc_pg_password }}"
    - section: database
      option: host
      value: "{% for n in groups['svc-postgres-master'] %}{{n}}{% endfor %}"
    - section: nosql_database
      option: name
      value: "{{ noc_mongo_db }}"
    - section: nosql_database
      option: user
      value: "{{ noc_mongo_user }}"
    - section: nosql_database
      option: password
      value: "{{ noc_mongo_password }}"
    - section: nosql_database
      option: host
      value: "{{ groups['svc-mongod'] | join(',') }}"
    - section: nosql_database
      option: replica_set
      value: "{{ noc_mongo_replicaset }}"
    - section: customization
      option: installation_name
      value: "{{ noc_installation_name }}"
