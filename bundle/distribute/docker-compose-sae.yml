version: '2'
services:
  omap:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/omap/service.py
    networks:
      - backend
    environment:
      SERVICE_NAME: omap
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}

  sae:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/sae/service.py
    networks:
      - backend
    environment:
      SERVICE_NAME: sae
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}

  scheduler:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/scheduler/service.py
    networks:
      - backend
    environment:
      SERVICE_NAME: scheduler
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}

  activator-default:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/activator/service.py
    networks:
      - backend
    environment:
      NOC_POOL: default
      SERVICE_NAME: activator-default
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}

  syslogcollector-default:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/syslogcollector/service.py
    networks:
      - backend
    environment:
      NOC_POOL: default
      SERVICE_NAME: syslogcollector-default
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}

  trapcollector-default:
    image: registry.getnoc.com/noc/noc-docker:master
    restart: always
    command: python ./services/trapcollector/service.py
    networks:
      - backend
    environment:
      NOC_POOL: default
      SERVICE_NAME: trapcollector-default
      NOC_CONFIG: consul://${DNS}/noc,env:///NOC
    dns: ${DNS}
