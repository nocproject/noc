[main]
debug = false
# Load non-minified versions of js libraries, if not false
debug_js = false
# Trace ExtJS events
trace_extjs_events = false
# Traceback order. One of
# forward -- top of stack last
# reverse -- top of stack first
traceback_order = reverse
# Comma-separated list of emails to send error reports
admin_emails =
# Local time zone for this installation. Choices can be found here:
# http://www.postgresql.org/docs/8.1/static/datetime-keywords.html#DATETIME-TIMEZONE-SET-TABLE
# although not all variations may be possible on all operating systems.
# If running in a Windows environment this must be set to the same as your
# system time zone.
timezone = Europe/Moscow
#
# Date Format:
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
#
date_format = d.m.Y
#
# Time format.
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
time_format = H:i:s
# Month/Day format
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
month_day_format = F j
# Month/Year format
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
year_month_format = F Y
#
# DateTime format:
# Allowed formats: http://docs.djangoproject.com/en/dev/ref/templates/builtins/#ttag-now
#
datetime_format = d.m.Y H:i:s
# Language code for this installation. All choices can be found here:
# http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes
# http://blogs.law.harvard.edu/tech/stories/storyReader$15
language_code = en-us
# Make this unique, and don't share it with anybody.
secret_key = j82icp#5zBUZ!4hx^#0s4)dy8sru@1ynqblq2!1lv1lu=7&(58
# From: for server-generated emails
server_email = root@localhost
# Socket factory polling method.
# Possible selections are:
# * optimal - auto-detect best supported method
# * select - use select()
# * poll   - use poll()
# * kevent - use kevent/kqueue
# * epoll  - use epoll
polling_method = select
# Comma-separated list of additionally installed applications
installed_apps =
# Maximum crashinfo size (in bytes)
crashinfo_limit = 1000000
# Header contining an original protocol, when changed by reverse proxy
# usually:
# x_forwarded_proto = X-Forwarded-Proto
x_forwarded_proto = X-Forwarded-Proto
# Log REST API calls and input parameters
log_api_calls = false
# Log SQL statements
log_sql_statements = false
# If set, return "Request too large" if json request
# is larger than limit (0 - unlimited)
json_row_limit = 0

[solutions]
# Enable noc.default solution
noc.default = true

[database]
# postgresql_psycopg2
engine   = postgresql_psycopg2
# Database name
name     = noc
# Database user
user     = noc
# User password
password = noc
# Set to empty string for localhost
host     =
# Set to empty string for default
port     =

[nosql_database]
# MongoDB database name
name = noc
# MongoDB database user
user = noc
# MongoDB database password
password = noc
# MongoDB hosts.
# Possible settings
# Localhost:
#   host =
# Host myhost, port 21017
#   host = myhost
# Host myhost, port 21018
#   host = myhost:21018
# Replica set connection, two seed hosts myhost1:21018 and myhost2:21019
#   host = myhost1:21018,myhost2:21019
host =
# Deprecated, use host:port form instead
port =
# Mongo replica set name for HA configuration
replica_set =

#
# NOC User Authentication
#
[authentication]
#
# Authentication method. Must be one of:
# local - use NOC's database to authenticate users
# ldap - use LDAP server to authenticate users (python-ldap library required)
# ad - use MS Active Directory (python-ldap library required)
# http - use HTTP's REMOTE_USER for authentication
# pyrule - use custom pyRule for authentication

method = local
#
# pyRule, returning login form class.
# Empty to use default auth_form_user_password
#
form_pyrule = 

# LDAP server URI (Applicable only for "ldap" method)
# If your LDAP server supports partitions (i.e Apache DS),
# specify suffix in the URI: ldap://ldap.exaple.com/suffix
ldap_server = ldap://ldap.example.com/
# LDAP bind method:
#     simple - authenticate user against userPassword
ldap_bind_method = simple
# technical DN to lookup user and group information
# leave empty for anonymous bind
ldap_bind_dn =
# Password for technical DN
ldap_bind_password = 
# Users search base
ldap_users_base = ou=Users,ou=nocproject,ou=org
# Filter to search users by username
ldap_users_filter = (&(objectClass=inetOrgPerson)(uid={{user}}))
# Groups search base
ldap_groups_base = ou=Groups,ou=nocproject,ou=org
# Additionaly check user in group, before permitting to log in
# Set user.is_active flag to false when user is not in a group
ldap_required_group = 
# Filter to search user in required group
ldap_required_filter = (|(uniqueMember={{dn}})(member={{user}}))
# Grant superuser permissions if user in group
ldap_superuser_group =
# Filter to search user in superusers group
ldap_superuser_filter = (|(uniqueMember={{dn}})(member={{user}}))
# Use TLS
ldap_start_tls = false

# AD server URI (Applicable only for "ad" method)
ad_server = ldap://ad.example.com/
# AD bind method:
#     simple - authenticate user against userPassword
ad_bind_method = simple
# technical DN to lookup user and group information
# leave empty for anonymous bind
ad_bind_dn =
# Password for technical DN
ad_bind_password = 
# Users search base
ad_users_base = ou=nocproject,ou=org
# Filter to search users by username
ad_users_filter = (&(objectClass=organizationalPerson)(sAMAccountName={{user}}))
# Groups search base
ad_groups_base = ou=Groups,ou=nocproject,ou=org
# Additionaly check user in group, before permitting to log in
# Set user.is_active flag to false when user is not in a group
ad_required_group = 
# Filter to search user in required group
ad_required_filter = noc_users
# Grant superuser permissions if user in group
ad_superuser_group = noc_superusers
# Filter to search user in superusers group
ad_superuser_filter =

# Radius server hostname or IP
radius_server = radius.example.com
# Radius secret
radius_secret = 
# NAS Identifier
radius_nas_identifier = noc-project
# Attribute to use to determine super user
radius_superuser_attribute = 
# Value of superuser attribute for user to be superuser
radius_superuser_value = 

# Authentication pyrule (for pyrule method)
pyrule_authentication =

# If group name given, permit logins only from specified group
restrict_to_group =

# If group name given, only one active session per group member is allowed
single_session_group =

# If group name given, only one active session per all group member is allowed
mutual_exclusive_group =
# If set, auto-logout after idle_timeout secods of inactivity
idle_timeout = 0

#
# Site customization
#
[customization]
# Installation name. Displayed in top left corner of web interface
installation_name = Unconfigured Installation
# Logo url. Absolute or relative path
logo_url = /static/img/logo_white.svg
# Logo width
logo_width = 24
# Logo height
logo_height = 24
# favicon url
favicon_url = /static/img/logo_24x24_deep_azure.png
# Default theme
default_theme = gray
# Top panel colors
branding_background_color = #34495e
branding_color = #ffffff

#
# UI themes
#
[themes]
neptune.name = Neptune
neptune.enabled = true

blue.name = Blue
blue.enabled = true

gray.name = Gray
gray.enabled = true

access.name = Access
access.enabled = true

crisp.name = Crisp
crisp.enabled = true

#
# cm module setup
#
[cm]
# Path to the root of the repos
repo     = /var/repo
# VCS Type: hg, CVS
vcs_type = hg
# Path to VCS CLI utility
vcs_path = /usr/local/bin/hg
# Limit amount of concurrently grabbed configs
# 0 - no limit
concurrency = 0
# Next check on activator overload
timeout_overload = 150
# Next check on down host
timeout_down     = 60
# Next check after config fetching error
timeout_error    = 300
# Random variation to timeout.
# If timeout is T and variation is N means
# the final timeout will be random value in range of [T-T/N,T+T/N]
timeout_variation = 10

[gridvcs]
# Mirror sa.managedobject.config to designated directory
# Do not mirror when empty
mirror.sa.managedobject.config =

#
# Peer module setup
#
[peer]
# RPSL pref semantics
#   off -> pref == localpref
#   on  -> pref == 65535 - localpref
rpsl_inverse_pref_style = off
#
# Enable prefix list optimization
#
prefix_list_optimization = on
#
# Prefix list optimization threshold.
# Do not optimize prefix lists shorter than threshold
#
prefix_list_optimization_threshold = 0
#
# Maximal prefix length for generated prefix lists
#
max_prefix_length = 32
#
# Update whois cache from RIPE database
#
use_ripe = on
#
# Update whois cache from ARIN database
#
use_arin = on
#
# Update whois cache from RADb database
#
use_radb = on

#
# DNS Module setup
#
[dns]
# Start to issue expiration warnings from warn_before_expired_days before deadline
warn_before_expired_days = 30
# Zone update delay
delay = 5
# Update zone if delayed more than cutoff
cutoff = 3600

#
# Trouble Ticketing System integration
#
[tt]
# Link to TT. %(tt)s expanded into ticket number
url = http://example.com/ticket=%%(tt)s

#
# Other paths
#
[path]
# Directory to store database and repo backups
backup_dir = /var/backup
# Paths to utilities
pg_dump    = /usr/local/bin/pg_dump
tar        = /usr/bin/tar
gzip       = /usr/bin/gzip
smidump    = /usr/bin/smidump
smilint    = /usr/bin/smilint
dig        = /usr/bin/dig
gpg        = /usr/bin/gpg
mongodump  = /usr/bin/mongodump
#
# Backup parameters
#
[backup]
keep_days          = 14
keep_weeks         = 12
keep_day_of_week   = 6
keep_months        = 12
keep_day_of_month  = 1
#
# Developers settings
#
[develop]
# Enable <install collection> button
install_collection = false

#
# PGP Settings
#
[pgp]
use_key   = user@example.com
keyserver = keys.gnupg.net
#
# FM Settings
#
[fm]
# Time to store active event in the noc.event.active collection
# before moving to archive
active_window = 86400
# Archive settings:
# Keep events without alarms in archive for X days
# 0 - do not archive
# -1 - keep forever
keep_events_wo_alarm = 0
# Archive settings:
# Keep events with alarms in archive for X days
# 0 - do not archive
# -1 - keep forever
keep_events_with_alarm = -1

#
# GIS Settings
#
[gis]
# Ellipsoids for distance calculations
# Possible values:
#     WGS-84
#     Krass
#     ПЗ-90
ellipsoid = ПЗ-90
# Enable OpenStreetMap base layer
enable_osm = true
# Enable Google Sattelite base layer
enable_google_sat = false
# Eanble Google Roadmap base layer
enable_google_roadmap = false

#
# Proxy settings
#
[proxy]
http_proxy =
https_proxy =
ftp_proxy =
#
# Cache settings
#
[cache]
sa_managedobjectselector_object_ids = 60
vc_vcinterfacescount = 3600
vc_vcprefixes = 3600

[version_inventory]
# Enable version discovery process
enabled = true
# Save result to database
save = true

[caps_discovery]
# Enable caps discovery process
enabled = true
# Save result to database
save = true

[uptime_discovery]
# Enable caps discovery process
enabled = true

[config_discovery]
# Enable config discovery process
enabled = true
# Save result to database
save = true

[interface_discovery]
enabled = true
save = true
success_retry = 86400
failed_retry = 900
# IInterfaceClassification-interfaced pyRule
# returning interface class name
# Used by noc.solutions.noc.default.discovery.interface.get_interface_profile
classification_pyrule =
# Description generator
get_interface_profile = noc.solutions.noc.default.discovery.interface.get_interface_profile

[interface_status_discovery]
enabled = true
save = true

[prefix_discovery]
enabled = true
save = true
# Change prefix state when found
# Format: from state -> to state; ...; from state -> to state
# Example:
# change_state = PLANNED -> ALLOCATED; RESERVED -> ALLOCATED
change_state =
# IGetDiscoveryCustom pyRule name to set up prefix custom fields
custom_pyrule =

[ip_discovery]
# Enable ip discovery process
enabled = true
# True - save results to IPAM database
# False - only report new addresses
save = true
# Inject new schedules every N seconds
initial_submit_interval = 900
# Upper limit of new schedule submitted at once
initial_submit_concurrency = 20
# Change address state when found
# Format: from state -> to state; ...; from state -> to state
# Example:
# change_state = PLANNED -> ALLOCATED; RESERVED -> ALLOCATED
change_state =
#
# Django template to generate discovered Address'es FQDN.
# USed by noc.solutions.noc.default.discovery.ip.get_fqdn solution
# Available context variables are:
#   object - Managed object instance
#   vrf - VRF instance
#   name - Managed object's name
#   host - host part of managed object's name
#   domain - domain part of managed object's name
#   interface - interface, on which address have been discovered
#   afi - address family, "4" or "6"
#   ip - ip address
#   IP - list of octets for IPv4 of 16-bit blocks for IPv6
#   rIP - IP in reversed order
#
fqdn_template = ip-{{ IP|join:"-" }}.{%% if domain %%}{{ domain }}{%% else %%}example.com{%% endif %%}
# Description generator
get_description = noc.solutions.noc.default.discovery.ip.get_description
# FQDN generator
get_fqdn = noc.solutions.noc.default.discovery.ip.get_fqdn

[vlan_discovery]
enabled = true
save = true
# change_state = PLANNED -> ALLOCATED; RESERVED -> ALLOCATED
change_state =

[mac_discovery]
enabled = true
save = true

[id_discovery]
enabled = true

[asset_discovery]
enabled = true
save = true
# Object name generator
get_name = noc.solutions.noc.default.discovery.asset.get_name

[lldp_discovery]
enabled = false

[cdp_discovery]
enabled = false

[stp_discovery]
enabled = false

[rep_discovery]
enabled = false

[bfd_discovery]
enabled = false

[udld_discovery]
enabled = false

[oam_discovery]
enabled = false

[audit]
# Store commands audit log
command_ttl = 1m
# Store login/logout audit log
login_ttl = 1m
# Store reboot/started/halted log
reboot_ttl = 0
# Store config changed log
config_changed_ttl = 1y
# Database audit
# Can be in form of
#     ttl.db = <time> - default database audit log TTL
#     ttl.db.<module> = <time> - default audit log TTL for module (sa, inv, etc)
#     ttl.db.<module>.<model> - default autid log TTL for model (sa.ManagedObject)
# 0 -- disable audit
ttl.db = 5y
# Path to directory to store MRT commands executed by user
# Must be writable by NOC user
log_mrt_commands =

[sync]
# Config expiration time in seconds
# Each config will be validated and rebuilded each config_ttl seconds
config_ttl = 86400
# Random config ttl variation, relative to config_ttl
# i.e. config_ttl = 3600, config_ttl_jitter = 0.01
# means for each metrics ttl will be set randomly in [3564 .. 3636] seconds
config_ttl_jitter = 0.01
# Timeout to refresh expired configs
# noc-web will refresh expired config by expired_refresh_chunk
# portions up to expired_refresh_timeout seconds
# Untouched expired configs will be left for other time
expired_refresh_timeout = 25
# Refresh expired configs batch
expired_refresh_chunk = 100

[script_timeout]
# Script timeouts, in seconds
# Default timeout
default = 120
# Custom timeouts in form:
# <script name> = <timeout>
Alcatel.7302.get_config = 1800
Alcatel.TIMOS.get_arp = 240
Alcatel.TIMOS.get_config = 850
Alcatel.TIMOS.get_interfaces = 850
Alentis.NetPing.get_config = 300
Brocade.CER.get_interfaces = 900
Brocade.CER-ADV.get_interfaces = 900
Brocade.IronWare.get_interfaces = 900
Cisco.IOS.get_interfaces = 240
Cisco.IOSXR.get_interfaces = 240
Cisco.SCOS.get_interfaces = 240
DLink.DGS3100.get_config = 360
DLink.DGS3100.get_interfaces = 300
DLink.DxS.get_config = 360
DLink.DxS.get_interfaces = 300
DLink.DxS.get_inventory = 300
EdgeCore.ES.get_interfaces = 240
Eltex.MES.get_interfaces = 240
f5.BIGIP.get_config = 300
HP.1905.get_mac_address_table = 300
Huawei.VRP.get_interfaces = 240
Huawei.VRP3.get_mac_address_table = 600
Juniper.JUNOS.sync_prefix_lists = 1800
Juniper.JUNOS.get_interfaces = 1800
NSN.hiX56xx.get_arp = 600
NSN.hiX56xx.get_mac_address_table = 600
Opticin.OS.get_interfaces = 240
Qtech.QSW.get_interfaces = 600
Extreme.XOS.get_interfaces = 1800
Extreme.XOS.get_mac_address_table = 1800
Extreme.XOS.get_switchport = 1800

[i18n]
# Global translation settings
# collections.global = ru, en
collections.global = en
# Collection-depended translations
# collections.fm.eventclasses = ua, ru, en

# Allow fuzzy translations
collections.global.allow_fuzzy = true
# Collection-depended fuzzy translations
# collections.fm.eventclasses.allow_fuzzy = true
