# ----------------------------------------------------------------------
# Create default labels
# ----------------------------------------------------------------------
# Copyright (C) 2007-2021 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Third-party modules
from pymongo import InsertOne

# NOC modules
from noc.core.migration.base import BaseMigration


class Migration(BaseMigration):
    depends_on = [("vc", "0025_labels")]

    TAG_MODELS = [
        ("sa_managedobjectprofile", "managedobjectprofile"),
        ("sa_administrativedomain", "adm_domain"),
        ("ip_vrf", "ipvrf"),
        ("vc_vcdomain", "vcdomain"),
        ("main_prefixtable", "prefixfilter"),
    ]

    TAG_COLLETIONS = [("noc.pools", "pool"), ("noc.ttsystem", "ttsystem")]

    def migrate(self):
        # Create wildcard labels
        l_coll = self.mongo_db["labels"]
        current_labels = {ll["name"]: ll["_id"] for ll in l_coll.find()}
        bulk = []
        if "noc::is_managed::=" not in current_labels:
            bulk += [
                InsertOne(
                    {
                        "name": "noc::is_managed::=",
                        "description": "",
                        "bg_color1": 16777215,
                        "fg_color1": 0,
                        "bg_color2": 16777215,
                        "fg_color2": 0,
                        "is_protected": False,
                        "is_autogenerated": False,
                    }
                )
            ]
        for ll in [("platfrom", "vendor")]:
            label = f"noc::{ll}::*"
            if label in current_labels:
                continue
            bulk += [
                InsertOne(
                    {
                        "name": label,
                        "description": "",
                        "bg_color1": 16777215,
                        "fg_color1": 0,
                        "bg_color2": 16777215,
                        "fg_color2": 0,
                        "is_protected": True,
                        "is_autogenerated": False,
                        "enable_managedobject": True,
                    }
                )
            ]
        # Migrate data
        for table, scope in self.TAG_MODELS:
            scope_label = f"noc::{scope}::*"
            if scope_label not in current_labels:
                bulk += [
                    InsertOne(
                        {
                            "name": f"noc::{scope}::*",
                            "description": "",
                            "bg_color1": 16777215,
                            "fg_color1": 0,
                            "bg_color2": 16777215,
                            "fg_color2": 0,
                            "is_protected": True,
                            "is_autogenerated": True,
                        }
                    )
                ]
            # Fill labels
            for (name,) in self.db.execute(
                """
                SELECT DISTINCT name
                FROM %s
                """
                % table
            ):
                label = f"noc::{scope}::{name}::="
                if label not in current_labels:
                    bulk += [
                        InsertOne(
                            {
                                "name": label,
                                "description": "",
                                "bg_color1": 16777215,
                                "fg_color1": 0,
                                "bg_color2": 16777215,
                                "fg_color2": 0,
                                "is_protected": False,
                                "is_autogenerated": True,
                            }
                        ),
                    ]
                if table == "sa_administrativedomain":
                    label = f"noc::{scope}::{name}::<"
                    if label not in current_labels:
                        bulk += [
                            InsertOne(
                                {
                                    "name": label,
                                    "description": "",
                                    "bg_color1": 16777215,
                                    "fg_color1": 0,
                                    "bg_color2": 16777215,
                                    "fg_color2": 0,
                                    "is_protected": False,
                                    "is_autogenerated": True,
                                }
                            )
                        ]
        # Mongo models
        for collection, scope in self.TAG_COLLETIONS:
            coll = self.mongo_db[collection]
            for item in coll.find({}, {"name": 1}):
                label = f"noc::{scope}::{item['name']}::="
                if label in current_labels:
                    continue
                bulk += [
                    InsertOne(
                        {
                            "name": label,
                            "description": "",
                            "bg_color1": 16777215,
                            "fg_color1": 0,
                            "bg_color2": 16777215,
                            "fg_color2": 0,
                            "is_protected": False,
                            "is_autogenerated": True,
                        }
                    )
                ]
        l_coll = self.mongo_db["labels"]
        if bulk:
            l_coll.bulk_write(bulk, ordered=True)
