# ----------------------------------------------------------------------
# Create utility labels labels
# ----------------------------------------------------------------------
# Copyright (C) 2007-2022 The NOC Project
# See LICENSE for details
# ----------------------------------------------------------------------

# Third-party modules
from pymongo import InsertOne, UpdateOne

# NOC modules
from noc.core.migration.base import BaseMigration


class Migration(BaseMigration):
    depends_on = [("vc", "0030_migrate_vc_vlan_filter")]

    def migrate(self):
        # Prefix Filter Labels
        # Create wildcard labels
        l_coll = self.mongo_db["labels"]
        vc_domains = {x["name"]: x["_id"] for x in self.mongo_db["vlanfilters"].find()}
        prefix_table = {}
        for ptid, name in self.db.execute("SELECT id, name FROM main_prefixtable"):
            prefix_table[name] = ptid
        bulk = [
            InsertOne(
                {
                    "name": "vlanfilter::*",
                    "description": "Wildcard label for VLANFilter match",
                    "bg_color1": 15844367,
                    "fg_color1": 16777215,
                    "bg_color2": 9323693,
                    "fg_color2": 16777215,
                    "is_protected": False,
                    "is_autogenerated": False,
                    "enable_interface": True,
                    "expose_alarm": False,
                }
            ),
            InsertOne(
                {
                    "name": "prefixfilter::*",
                    "description": "Wildcard label for Prefix Filter match",
                    "bg_color1": 15844367,
                    "fg_color1": 16777215,
                    "bg_color2": 9323693,
                    "fg_color2": 16777215,
                    "is_protected": False,
                    "is_autogenerated": False,
                    "enable_interface": True,
                    "enable_managedobject": True,
                    "expose_alarm": False,
                }
            ),
        ]
        vc_domains_labels = set()
        prefix_table_labels = set()
        # VC Filter Labels
        ip_coll = self.mongo_db["noc.interface_profiles"]
        ip_bulk = []
        for ip in ip_coll.find({"match_rules": {"$ne": []}}, {"match_rules": 1}):
            match_rules = []
            for mr in ip.get("match_rules", []):
                nl = []
                changed = False
                for ll in mr["labels"]:
                    if ll.startswith("noc::vcfilter::"):
                        _, _, vc_name, vc_scope, _ = ll.split("::", 4)
                        if vc_name in vc_domains:
                            nl += [f"vlanfilter_{vc_name}_{vc_scope}"]
                            vc_domains_labels.add((vc_name, vc_scope))
                            changed = True
                            continue
                    if ll.startswith("noc::prefixfilter::"):
                        _, _, pt_name, _ = ll.split("::", 3)
                        if pt_name in prefix_table:
                            nl += [f"prefixfilter_{pt_name}"]
                            prefix_table_labels.add(pt_name)
                            changed = True
                            continue
                    nl += [ll]
                if changed:
                    match_rules += [{"dynamic_order": mr["dynamic_order"], "labels": nl}]
            if match_rules:
                ip_bulk += [UpdateOne({"_id": ip["_id"]}, {"$set": {"match_rules": match_rules}})]
        for vc_name, vc_scope in vc_domains_labels:
            bulk += [
                InsertOne(
                    {
                        "name": f"vlanfilter_{vc_name}_{vc_scope}",
                        "bg_color1": 15844367,
                        "fg_color1": 16777215,
                        "bg_color2": 9323693,
                        "fg_color2": 16777215,
                        "display_order": 0,
                        "is_protected": False,
                        "is_autogenerated": False,
                        "is_matching": True,
                        "enable_interface": True,
                        "match_regex": [],
                        "match_vlanfilter": [
                            {
                                "vlan_filter": vc_domains[vc_name],
                                "condition": "any",
                                "scope": (
                                    "subinterface_tagged_vlans"
                                    if vc_scope == "tagged"
                                    else "subinterface_untagged_vlan"
                                ),
                            }
                        ],
                        "match_prefixfilter": [],
                    }
                )
            ]
        for pt_name in prefix_table_labels:
            bulk += [
                InsertOne(
                    {
                        "name": f"prefixfilter_{pt_name}",
                        "bg_color1": 15844367,
                        "fg_color1": 16777215,
                        "bg_color2": 9323693,
                        "fg_color2": 16777215,
                        "display_order": 0,
                        "is_protected": False,
                        "is_autogenerated": False,
                        "is_matching": True,
                        "enable_interface": True,
                        "match_regex": [],
                        "match_vlanfilter": [],
                        "match_prefixfilter": [
                            {
                                "prefix_table": prefix_table[pt_name],
                                "condition": "any",
                                "scope": "subinterface_ipv4_addresses",
                            }
                        ],
                    }
                )
            ]
        if bulk:
            l_coll.bulk_write(bulk, ordered=True)
        if ip_bulk:
            ip_coll.bulk_write(ip_bulk)
        l_coll.delete_many({"name": {"$regex": ".+vcfilter.+"}})
