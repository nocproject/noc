[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61.2", "wheel"]

[project]
authors = [{name = "Gufo Labs"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Networking",
  "Topic :: System :: Networking :: Monitoring",
  "Operating System :: POSIX :: Linux",
  "Typing :: Typed",
]
description = "NOC is an Operation Support System (OSS) for telecom companies, service providers, and enterprise Network Operation Centers"
dynamic = ["version"]
keywords = ["monitoring", "inventory", "fault management", "performance management", "ipam"]
license = {file = "LICENSE.md"}
name = "noc"
requires-python = ">=3.10"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
"Bug Tracker" = "https://code.getnoc.com/noc/noc/-/issues"
Changelog = "https://getnoc.com/release-policy/"
Documentation = "https://getnoc.com/"
Homepage = "https://getnoc.com/"
"Source Code" = "https://code.getnoc.com/noc/noc/-/tree/master"

[project.optional-dependencies]
activator = ["ssh2-python==1.1.2.post1"]
bh = [
  "gufo-ping==0.5.0",
  "gufo-traceroute==0.2.0",
]
cache-memcached = ["pylibmc==1.6.3"]
cache-redis = ["hiredis==3.1.0", "redis==4.6.0"]
classifier = ["bitarray==3.7.1"]
dev = [
  "Babel==2.13.1",
  "ipython==7.29.0",
  "pojson==0.7",
]
docs = [
  "mkdocs==1.5.3", # WARNING: Do not bump this version toas 1.6.0 brokes blog plugin of material 9.2.5
  "mkdocs-material==9.2.5", # WARNING: Do not bump this version as any other are incompatible with mkdocs-static-i18n
  "mkdocstrings[python]==0.22.0",
  "mkdocs-macros-plugin==1.0.5",
  "mkdocs-static-i18n==1.3.0",
  "mkdocs-gen-files==0.5.0",
  "mkdocs-literate-nav==0.6.1",
  "minify_html==0.16.4",
  "cachetools==5.5.2", # For {{ config_param() }}
]
lint = [
  "ruff==0.6.3",
  "mypy==1.10",
  "black==24.8.0",
  "mongo-types==0.15.1",
  "types-orjson==3.6.2",
  "types-cachetools==5.5.0.20240820",
]
login-ldap = ["ldap3==2.9.1"]
login-pam = ["python-pam==1.8.4"]
login-radius = ["pyrad==2.4"]
node = [
  "aiokafka[lz4,snappy,zstd]==0.12.0",
  "Django==4.2.23",
  "FastAPI==0.115.11",
  "Jinja2==3.1.5",
  "PyYAML==6.0.2",
  "Pygments==2.19.1",
  "XlsxWriter==3.2.2",
  "atomicl==0.1.1",
  "blinker==1.9.0",
  "bsdiff4==1.2.6",
  "cachetools==5.5.2",
  "crontab==1.0.1",
  "siphash24==1.8",
  "demjson3==3.0.6",
  "dnspython==2.7.0",
  "fs==2.4.16",
  "geojson==3.2.0",
  "geopy==2.4.1",
  "gufo-http==0.4.0",
  "manhole==1.8.1",
  "markerlib==0.6.0",
  "mongoengine==0.29.0",
  "motor==3.5.1",
  "networkx==3.4.2",
  "numpy==1.26.2",
  "orjson==3.10.15",
  "progressbar2==4.5.0",
  "psycopg2-binary==2.9.10",
  "polars-lts-cpu==1.24.0",
  "pydantic==2.6.4",
  "pymongo==4.8.0",
  "pyproj==3.7.1",
  "python-consul==1.1.0",
  "python-creole==1.4.10",
  "python-dateutil==2.9.0",
  "python-jose[cryptography]==3.4.0",
  "python-multipart==0.0.20",
  "pytz==2025.1",
  "requests==2.32.0",
  "setproctitle==1.3.5",
  "uvicorn==0.34.3",
  'yappi==1.6.10; sys_platform == "linux" and platform_machine == "x86_64"',
  "gufo-liftbridge==0.2.0",
  "gufo-snmp==0.8.3",
  "gufo_noc_speedup==0.1.0",
  "urllib3<2", # To be deleted after drop OS with openssl<1.1.1 (centos7,rhel7,deb9)
]
ping = ["gufo-ping==0.5.0"]
prod-tools = [
  "sentry-sdk==0.20.3",
  "supervisor-wildcards==0.1.3",
]
sender-kafka = ["aiokafka[lz4,snappy,zstd]==0.12.0"]
supervisor = [
  "supervisor==4.2.5",
  "supervisor-serialrestart==0.1.1",
]
test = [
  "pytest==7.4.4",
  "Coverage[toml]==7.4.4",
  "pytest-dependency==0.5.1",
]
testing = ["dbf==0.99.3"]
vcenter = ["pyvmomi==8.0.3.0.1"]
zabbix = ["zabbix-utils==2.0.2"]

[tool.setuptools]
include-package-data = true
package-dir = {"" = "."}
zip-safe = false

[tool.setuptools.packages.find]
namespaces = true
where = ["src"]

[tool.setuptools.dynamic]
version = {file = "VERSION"}

[tool.setuptools.package-data]
"noc" = ["py.typed", "**/*.j2"]

[tool.black]
line-length = 100 # Must be same as tool.ruff.line-length
target-version = ['py310'] 

[tool.coverage.run]
omit = ['*tests*']

[tool.coverage.report]
ignore_errors = true

[tool.coverage.html]
directory = "build/coverage"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [".git", "build", "dist", "var", "share", "collections"] 
line-length = 100 # Must be same as tool.black.line-length
# Assume Python 3.10
target-version = "py310"
# Always autofix, but never try to fix `F401` (unused imports).
fix = false #fix = true

[tool.ruff.lint]
ignore = [
  "A001", # A001 Variable `{name}` is shadowing a python builtin
  "A002", # A002 Argument `{name}` is shadowing a python builtin
  "A003", # Class attribute `{name}` is shadowing a python builtin"
  "D203",
  "D212",
  "D107",
  "PLR0912", # Too many branches
  "PLR0911", # Too many return statements
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison, consider replacing {v} with a constant variable
  "PLR2044", # Line with empty comment
  "PLR5501", # Use `elif` instead of `else` then `if`, to reduce indentation
  "PLR1714", # Consider merging multiple comparisons: `f1 not in (f0, f2)`. Use a `set` if the elements are hashable.
  "PLR1730", # Replace `if` statement with `width = max(width, max_column_data_length[c])`
  "PLR1704", # Redefining argument with the local name `name`
]
# Enable
select = [
  # "E", # Pycodestyle Error
  "F", # Pyflakes
  "W", # Pycodestyle Warning
  # "C90", # mccabe
  # "I", # isort
  # "D", # Pydocstyle
  # "YTT", # flake8-2020
  # "ANN", # flake8-annotations
  # "S", # flake8-bandit
  # "BLE", # flake8-blind-except
  # "B", # flake8-bugbear
  "A", # flake8-builtins
  # "C4", # flake8-comprehensions 
  # "EM", # flake8-errmsg
  # "ISC", # flake8-implicit-str-concat
  # "ICN", # flake8-import-conventions
  # "PT", # flake8-pytest-style
  # "RET", # flake8-return
  # "SIM", # flake8-simplify
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint
  # "PLW", # pylint
  # "PIE", # flake8-pie
  # "RUF", # ruff specific
]
unfixable = [
  "F401",
  "F841", # unused-variable
  "F811", # Redefinition of unused `ReportBand` from line 66
  "PLR1711", # Useless `return` statement at end of function  # "F811", # Redefinition of unused `ReportBand` from line 66
]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"*/migrations/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"cmibs/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"tests/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "S101", # Use of assert detected
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "PT011", # {exc} is to broad
]
