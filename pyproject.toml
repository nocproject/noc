# Black section
[tool.black]
line-length = 100 # Must be same as tool.ruff.line-length
target-version = ['py310'] 

[tool.coverage.run]
omit = ['*tests*']

[tool.coverage.report]
ignore_errors = true

[tool.coverage.html]
directory = "build/coverage"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [".git", "build", "dist", "var", "share", "collections"] 
line-length = 100 # Must be same as tool.black.line-length
# Assume Python 3.10
target-version = "py310"
# Enable
select = [
  # "E", # Pycodestyle Error
  "F", # Pyflakes
  "W", # Pycodestyle Warning
  # "C90", # mccabe
  # "I", # isort
  # "D", # Pydocstyle
  # "YTT", # flake8-2020
  # "ANN", # flake8-annotations
  # "S", # flake8-bandit
  # "BLE", # flake8-blind-except
  # "B", # flake8-bugbear
  "A", # flake8-builtins
  # "C4", # flake8-comprehensions 
  # "EM", # flake8-errmsg
  # "ISC", # flake8-implicit-str-concat
  # "ICN", # flake8-import-conventions
  # "PT", # flake8-pytest-style
  # "RET", # flake8-return
  # "SIM", # flake8-simplify
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint
  # "PLW", # pylint
  # "PIE", # flake8-pie
  # "RUF", # ruff specific
]
# Always autofix, but never try to fix `F401` (unused imports).
fix = false #fix = true
ignore = [
  "A001", # A001 Variable `{name}` is shadowing a python builtin
  "A002", # A002 Argument `{name}` is shadowing a python builtin
  "A003", # Class attribute `{name}` is shadowing a python builtin"
  "D203",
  "D212",
  "D107",
  "PLR0912", # Too many branches
  "PLR0911", # Too many return statements
  "PLR0913", # Too many arguments to function call
  "PLR0915", # Too many statements
  "PLR2004", # Magic value used in comparison, consider replacing {v} with a constant variable
] 
unfixable = [
  "F401",
  "F841", # unused-variable
] 

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.per-file-ignores]
"*/migrations/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"cmibs/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
]
"tests/*.py" = [
  "D100", # Missing docstring in public module
  "D101", # Missing docstring in public class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "S101", # Use of assert detected
  "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
  "PT011", # {exc} is to broad
]
