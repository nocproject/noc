#!./bin/python
# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## Generate etc/supervisord.conf
##----------------------------------------------------------------------
## Copyright (C) 2007-2015 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## Python modules
import os
import glob
import ConfigParser
import cStringIO

CFG = "etc/supervisord.conf"

def format_env(env):
    """
    Build environment string
    """
    def q(s):
        return str(s).replace("%", "%%")
    return ",".join("%s=\"%s\"" % (k, q(env[k])) for k in env)

def build():
    config = ConfigParser.RawConfigParser()
    # Read configs
    for ge in [
        "etc/defaults/supervisor/*.conf",
        "etc/defaults/services/*.conf",
        "etc/defaults/groups/*.conf",
        "etc/config/supervisor/*.conf",
        "etc/config/services/*.conf",
        "etc/config/groups/*.conf"
    ]:
        for path in glob.glob(ge):
            config.read(path)
    # Read environments
    env = {}
    env_config = ConfigParser.RawConfigParser()
    env_config.optionxform = str  # Preserve case
    for path in glob.glob("etc/config/env/*.conf"):
        env_config.read(path)
    for s in env_config.sections():
        env[s] = {}
        for o in env_config.options(s):
            env[s][o] = env_config.get(s, o)
    # @todo: Check for required options
    noc_env = env["supervisord"]["NOC_ENV"]
    noc_dc = env["supervisord"]["NOC_DC"]
    noc_node = env["supervisord"]["NOC_NODE"]
    # Build config
    out = ConfigParser.ConfigParser()
    for s in config.sections():
        out.add_section(s)
        # Build service's environment
        de = {}
        if s == "supervisord":
            pn = s
        elif s.startswith("program:"):
            pn = s[8:]
            de["NOC_CONF"] = ":".join([
                "/v1/kv/noc/%s/config/global/%s/" % (noc_env, pn),
                "/v1/kvnoc/%s/config/dc/%s/node/%s/%s/" % (
                    noc_env, noc_dc, noc_node, pn)
            ])
        else:
            pn = None
        if pn:
            de.update(env.get(pn, {}))
            if de:
                ce = ""
                if config.has_option(s, "environment"):
                    ce = config.get(s, "environment") + ","
                ce += format_env(de)
                config.set(s, "environment", ce)
        re = de.copy()  # service + supervisor environment
        re.update(env["supervisord"])
        for o in config.options(s):
            v = config.get(s, o)
            # Apply environment variables to parameters
            for e in re:
                v = v.replace("%%(ENV_%s)s" % e, re[e])
            out.set(s, o, v)
    buffer = cStringIO.StringIO()
    out.write(buffer)
    cfg = buffer.getvalue()
    # Read old config
    with open(CFG) as f:
        old = f.read()
    if old != cfg:
        # Rewrite
        with open(CFG, "w") as f:
            f.write(cfg)

if __name__ == "__main__":
    build()
