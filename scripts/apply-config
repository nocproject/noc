#!./bin/python
# -*- coding: utf-8 -*-
##----------------------------------------------------------------------
## Generate etc/supervisord.conf
##----------------------------------------------------------------------
## Copyright (C) 2007-2015 The NOC Project
## See LICENSE for details
##----------------------------------------------------------------------

## Python modules
import glob
import ConfigParser
import cStringIO

CFG = "etc/supervisord.conf"

def format_env(env):
    """
    Build environment string
    """
    def q(s):
        return str(s).replace("%", "%%")
    return ",".join("%s=\"%s\"" % (k, q(env[k])) for k in env)

def build():
    config = ConfigParser.RawConfigParser()
    # Read configs
    for ge in [
        "etc/defaults/supervisor/*.conf",
        "etc/defaults/services/*.conf",
        "etc/defaults/groups/*.conf",
        "etc/config/supervisor/*.conf",
        "etc/config/services/*.conf",
        "etc/config/groups/*.conf"
    ]:
        for path in glob.glob(ge):
            config.read(path)
    # Read cluster settings
    noc_env = "eval"
    noc_dc = "dc1"
    noc_node = "n01"
    if config.has_option("noc-cluster", "environment"):
        noc_env = config.get("noc-cluster", "environment")
    if config.has_option("noc-cluster", "datacenter"):
        noc_dc = config.get("noc-cluster", "datacenter")
    if config.has_option("noc-cluster", "node"):
        noc_node = config.get("noc-cluster", "node")
    # Apply cluster settings
    # Change supervisorctl prompt
    if config.has_option("supervisorctl", "prompt"):
        config.set(
            "supervisorctl", "prompt",
            "%s@%s-%s-%s" % (
                config.get("supervisorctl", "prompt"),
                noc_env, noc_dc, noc_node
            )
        )
    # Set supervisor environment
    se = {
        "NOC_ENV": noc_env,
        "NOC_DC": noc_dc,
        "NOC_NODE": noc_node
    }
    svc_env = ""
    if config.has_option("supervisor", "environment"):
        svc_env = config.get("supervisor", "environment") + ","
    svc_env += format_env(se)
    config.set("supervisord", "environment", svc_env)
    # Build config
    out = ConfigParser.ConfigParser()
    for s in config.sections():
        if s.startswith("noc-"):
            continue
        out.add_section(s)
        for o in config.options(s):
            v = config.get(s, o)
            for e in se:
                v = v.replace("%%(ENV_%s)s" % e, se[e])
            out.set(s, o, v)
    buffer = cStringIO.StringIO()
    out.write(buffer)
    cfg = buffer.getvalue()
    # Read old config
    with open(CFG) as f:
        old = f.read()
    if old != cfg:
        # Rewrite
        with open(CFG, "w") as f:
            f.write(cfg)

if __name__ == "__main__":
    build()
