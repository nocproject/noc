#!/bin/sh
##----------------------------------------------------------------------
## Initialize and upgrade NOC
##----------------------------------------------------------------------
## Copyright (C) 2007-2014 The NOC Project
## See LICENSE for details
##---------------------------------------------------------------------

##
## Helper functions definitions
##
error_exit ( ) {
    printf "\033[1;31m$PROGNAME: ${1:-'Unknown error'}\033[0m\n" 1>&2
    echo "Terminating" 1>&2
    # Report status
    if [ ! -z "${UPGRADE_LOG}" ]; then
        if [ -x ./scripts/cptool ]; then
            info "Reporting upgrade status"
            ./scripts/cptool --quiet --upgrade --failure --log=${UPGRADE_LOG}
        fi
        save_upgrade_log
    fi
    exit 1
}

info ( ) {
    echo $1 1>&2
}

ensure_dir ( ) {
    if [ ! -d "$1" ]; then
        info "   Creating $1"
        mkdir -p $1 || error_exit "Unable to create directory '$1'"
    fi
    chown $NOC_USER:$NOC_GROUP $1
    chmod $2 $1
}

# Write config option
# ensure_prog <prog> <section> <option>
ensure_prog ( ) {
    prog=`which $1`
    if [ $? -ne 0 ]; then
        rm ./etc/noc.conf
        error_exit "$LINENO: '$1' is not found"
    fi
    ./scripts/set-conf.py ./etc/noc.conf $2 $3 $prog || error_exit "Unable to set etc/noc.conf:[$2]/$3"
}

save_upgrade_log ( ) {
    log_dst=""
    if [ ! -z "${LOG}" ]; then
        if [ -d "${LOG}" ]; then
            log_dst="${LOG}/upgrade.log"
        fi
    else
        if [ -d "local" ]; then
            log_dst="local/upgrade.log"
        fi
    fi
    if [ -z "${log_dst}" ]; then
        log_dst="$HOME/noc-upgrade.log"
    fi
    info "Saving upgrade log to ${log_dst}"
    mv "${UPGRADE_LOG}" "${log_dst}"
}

##
cd `dirname $0`/../
PROGNAME=`basename $0`
PREFIX=$PWD
##
## Check, if NOC is already running
##
if [ -f "./etc/noc-launcher.conf" ]; then
    PIDFILE=`grep pidfile ./etc/noc-launcher.conf | cut -d '=' -f2 | sed 's/[ \t]*//'`
    if [ -f "$PIDFILE" ]; then
        error_exit "NOC is running now. Shutdown it first."
    fi
    ./scripts/migrate-launcher-conf.py
fi
##
## Setup logging
##
UPGRADE_LOG=`mktemp /tmp/noc-upgrade.log.XXXXXX`
UPGRADE_PIPE=${UPGRADE_LOG}.pipe
mkfifo $UPGRADE_PIPE || error_exit "Cannot create logging pipe"
tee < $UPGRADE_PIPE $UPGRADE_LOG &
exec &> $UPGRADE_PIPE
rm $UPGRADE_PIPE
echo "Logging to ${UPGRADE_LOG}"
##
## Include configs
##
[ -f ./etc/upgrade.defaults ] && . ./etc/upgrade.defaults
[ -f ./etc/upgrade.conf ] && . ./etc/upgrade.conf
##
## Check upgrade system has been configured
##
if [ "$ENABLED" != "yes" ]; then
    error_exit "Upgrade is disabled. Please edit etc/upgrade.conf and run $0 again"
fi
##
## Check etc/support.conf
##
if [ ! -f "etc/support.conf" ]; then
    info "Creating empty etc/support.conf"
    touch etc/support.conf
fi
chown $NOC_USER:$NOC_GROUP etc/support.conf
chmod 600 etc/support.conf
##
## Apply OS-depended settings
##
OSNAME=`uname -s`
OSSETTINGS="./scripts/os/$OSNAME/upgrade"
if [ -f $OSSETTINGS ]; then
    info "Using $OSNAME specific settings from $OSSETTINGS"
    . $OSSETTINGS
fi

## Run pre-upgrade local script
if [ -x ./local/bin/pre-upgrade ]; then
    info "Running ./local/bin/pre-upgrade"
    ./local/bin/pre-upgrade
fi
## Determine NOC user
if [ -z "$NOC_USER" ]; then
    NOC_USER=`id -n -u`
fi
## Determine NOC group
if [ -z "$NOC_GROUP" ]; then
    NOC_GROUP=`id -n -g`
fi
##
## Check virtualenv is enabled and set up
##
info "Checking virtualenv"
if [ ! -x ./bin/python ]; then
    info "vitualenv is not configured. Trying to set up"
    # Check virtualenv is available
    which virtualenv
    if [ $? -ne 0 ]; then
        error_exit "$LINENO: virtualenv is not installed.\nPlease install virtualenv:\n > pip install virtualenv\nand run $0 again"
    fi
    # Check for legacy contrib directory
    if [ -d contrib ]; then
        info "Legacy contrib/ found. Rename to contrib.bak/"
        mv contrib contrib.bak || error_exit "Cannot rename contrib/"
    fi
    # Initialize virtualenv
    info "Setting up virtualenv"
    virtualenv $PWD --no-site-packages
    if [ $? -ne 0 ]; then
        error_exit "$LINENO: Cannot setup virtualenv.\nPlease run:\n > virtualenv $PWD --no-site-packages\nmanually and run $0 again"
    fi
fi

## Check upgrade.conf
[ -z "$LOCAL_REPO" ] && error_exit "$LINENO: LOCAL_REPO is not set"
[ -z "$BACKUP" ] && error_exit "$LINENO: BACKUP is not set"
[ -z "$LOG" ] && error_exit "$LINENO: LOG is not set"
[ -z "$PIDDIR" ] && error_exit "$LINENO: PIDDIR is not set"
## Check directories path does not point to existing NOC directory
[ "$LOCAL_REPO" = "$PWD" ] && error_exit "$LINENO: LOCAL_REPO points to $PWD"
[ "$BACKUP" = "$PWD" ] && error_exit "$LINENO: BACKUP points to $PWD"
[ "$LOG" = "$PWD" ] && error_exit "$LINENO: LOG points to $PWD"
[ "$PIDDIR" = "$PWD" ] && error_exit "$LINENO: PIDDIR points to $PWD"

##
## Set up configuration files, when necessary
##
info "Set up configuration files"
for d in ./etc/noc*.defaults; do
    conf=`echo $d|sed 's/.defaults$/.conf/'`
    if [ ! -f $conf ]; then
        info "    Creating $conf"
        cp $d $conf
        chmod 640 $conf
        chown $NOC_USER:$NOC_GROUP $conf
        ./scripts/set-conf.py $conf main logfile $LOG || error_exit "$LINENO: Unable to set $conf:[main]/logfile"
        ./scripts/set-conf.py $conf main pidfile $PIDDIR || error_exit "$LINENO: Unable to set $conf:[main]/pidfile"
        if [ $conf = "./etc/noc.conf" ]; then
            # Set up paths
            ensure_prog pg_dump path pg_dump
            ensure_prog tar path tar
            ensure_prog gzip path gzip
            ensure_prog smidump path smidump
            ensure_prog smilint path smilint
            ensure_prog mongodump path mongodump
            ensure_prog hg cm vcs_path
            ./scripts/set-conf.py ./etc/noc.conf cm repo $LOCAL_REPO || error_exit "$LINENO: Unable to set etc/noc.conf:[cm]/repo"
            ./scripts/set-conf.py ./etc/noc.conf path backup $BACKUP || error_exit "$LINENO: Unable to set etc/noc.conf:[path]/backup"
            # Set up PostgreSQL database
            ./scripts/set-conf.py ./etc/noc.conf database name $PG_DB || error_exit "$LINENO: Unable to set etc/noc.conf:[database]/name"
            ./scripts/set-conf.py ./etc/noc.conf database user $PG_USER || error_exit "$LINENO: Unable to set etc/noc.conf:[database]/user"
            ./scripts/set-conf.py ./etc/noc.conf database password $PG_PASSWORD || error_exit "$LINENO: Unable to set etc/noc.conf:[database]/password"
            ./scripts/set-conf.py ./etc/noc.conf database host $PG_HOST || error_exit "$LINENO: Unable to set etc/noc.conf:[database]/host"
            ./scripts/set-conf.py ./etc/noc.conf database port $PG_PORT || error_exit "$LINENO: Unable to set etc/noc.conf:[database]/port"
            # Set up MongoDB database
            ./scripts/set-conf.py ./etc/noc.conf nosql_database name $MONGO_DB || error_exit "$LINENO: Unable to set etc/noc.conf:[nosql_database]/name"
            ./scripts/set-conf.py ./etc/noc.conf nosql_database user $MONGO_USER || error_exit "$LINENO: Unable to set etc/noc.conf:[nosql_database]/user"
            ./scripts/set-conf.py ./etc/noc.conf nosql_database password $MONGO_PASSWORD || error_exit "$LINENO: Unable to set etc/noc.conf:[nosql_database]/password"
            ./scripts/set-conf.py ./etc/noc.conf nosql_database host $MONGO_HOST || error_exit "$LINENO: Unable to set etc/noc.conf:[nosql_database]/host"
            ./scripts/set-conf.py ./etc/noc.conf nosql_database port $MONGO_PORT || error_exit "$LINENO: Unable to set etc/noc.conf:[nosql_database]/port"
        fi
    fi
done
##
## Create required directories
##
info "Creating required directories"
ensure_dir local 750
ensure_dir etc/ssh 700
ensure_dir etc/config/supervisor 700
ensure_dir etc/config/services 700
ensure_dir var/sock 700
ensure_dir var/log
ensure_dir var/run
ensure_dir var/db/consul
ensure_dir var/db/mongo
ensure_dir var/db/nsq
ensure_dir var/db/postgres
[ -z "$LOCAL_REPO" ] || ensure_dir $LOCAL_REPO 750
[ -z "$BACKUP" ] || ensure_dir $BACKUP 750
# @todo: Remove
[ -z "$LOG" ] || ensure_dir $LOG 750
##
## Uninstall legacy patches
##
PATCH_FLAG="local/.patch"
if [ ! -f $PATCH_FLAG ]; then
    if [ ! -h lib/python ]; then
        info "Creating lib/python symlink"
        if [ -d lib/python2.7 ]; then
            (cd lib && ln -s python2.7 python)
        else
            (cd lib && ln -s python2.6 python)
        fi
    fi
    info "Reverting legacy patches"
    ./scripts/apply-patches --fix || error_exit "$LINENO: Failed to revert legacy patches"
    touch $PATCH_FLAG
fi

##
## Revert applied patches
##
QUILT=`which quilt`
[ -z "$QUILT" ] && error_exit "$LINENO: quilt not found. Please install quilt from OS packages"
info "Reverting local patches"
./scripts/apply-patches --revert || error_exit "$LINENO: Failed to revert local patches"
##
## Pull repo
##
info "Pulling branch $BRANCH from repo $REPO"
if [ -x ./bin/hg ]; then
    HG=./bin/hg
else
    HG=`which hg`
fi
if [ ! -z "$NOC_BRANCH" ]; then
    info "Forcefully set NOC branch to $NOC_BRANCH"
    BRANCH=$NOC_BRANCH
fi
if [ $BRANCH != "none" ]; then
    UPGRADETS=./local/upgrade-time
    touch $UPGRADETS
    $HG pull -b "$BRANCH" -u $REPO || error_exit "$LINENO: Failed to pull branch $BRANCH out of repo $REPO"
    if [ `$HG branch` = "$BRANCH" ]; then
        $HG update || error_exit "$LINENO: Failed to update repo"
    else
        info "Switching to branch $BRANCH"
        $HG update -c $BRANCH || error_exit "$LINENO: Failed to update to branch $BRANCH"
    fi
    if [ ./scripts/upgrade -nt $UPGRADETS ]; then
        info "./scripts/upgrade has been upgraded. Restarting"
        rm -f $UPGRADETS
        exec ./scripts/upgrade "$@"
    fi
    rm -f $UPGRADETS
fi
##
## Update required python modules
##
info "Upgrading PIP"
./bin/pip install pip --upgrade || error_exit "$LINENO: Failed to update PIP"
info "Updating python libraries"
PIP_REQUIREMENTS_COMMON=etc/requirements/common.txt
PIP_REQUIREMENTS_NOC=etc/requirements/noc.txt
PIP_FLAG=local/.pip
PIP_ARGS="-r $PIP_REQUIREMENTS_COMMON -r $PIP_REQUIREMENTS_NOC --trusted-host cdn.nocproject.org"
if [ "$INSTALL_DEBUG" = "yes" ]; then
    PIP_ARGS="$PIP_ARGS -r etc/requirements/debug.txt"
fi
if [ -f "etc/requirements/local.txt" ]; then
    PIP_ARGS="$PIP_ARGS -r etc/requirements/local.txt"
fi
if [ ! -z "$PIP_FIND_LINKS" ]; then
    PIP_ARGS="$PIP_ARGS --find-links $PIP_FIND_LINKS --allow-all-external"
fi
if [ $PIP_REQUIREMENTS_NOC -nt $PIP_FLAG -o $PIP_REQUIREMENTS_COMMON -nt $PIP_FLAG ]; then
    PIP_ARGS="$PIP_ARGS --upgrade"
fi

./bin/pip install $PIP_ARGS || error_exit "$LINENO: Cannot update python libraries"
touch $PIP_FLAG
##
## Apply local patches
##
info "Apply local patches"
./scripts/apply-patches || error_exit "$LINENO: Cannot apply patches"
##
## Install noc.pth
##
info "Installing noc.pth"
./scripts/install-pth.py || error_exit "$LINENO: Cannot install noc.pth"
##
## Install sitecustomize.py
##
info "Customizing Python site settings"
./scripts/check-sitecustomize.py || error_exit "$LINENO: Cannot install check-sitecustomize.py"
##
## Compile bytecode
##
./scripts/compile || error_exit "$LINENO: Failed to compile bytecode"
##
## Check for hanging .pyc files
##
info "Looking for hanging .pyc files"
./scripts/check-pyc.py || error_exit "$LINENO: Inconsistent .pyc files found"
##
## Run REST with $NOC_USER credentials
##
info "Running the rest of upgrade process with user $NOC_USER credentials"
if [ "$NOC_USER" = `id -n -u` ]; then
    ./scripts/upgrade-user || error_exit "$LINENO: Failed to upgrade user part"
else
    su $NOC_USER -c "./scripts/upgrade-user" || error_exit "$LINENO: Failed to upgrade user part"
fi
## Run post-upgrade local script
if [ -x ./local/bin/post-upgrade ]; then
    info "Running ./local/bin/post-upgrade"
    ./local/bin/post-upgrade
fi
# Done
info "Reporting upgrade status"
./scripts/cptool --quiet --upgrade --success
info "$PROGNAME complete"
save_upgrade_log
