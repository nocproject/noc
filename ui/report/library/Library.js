// Generated by CoffeeScript 1.10.0
(function() {
  Ext.define('Report.library.Library', {
    extend: 'Ext.window.Window',
    xtype: 'library',
    cls: 'library',
    title: 'Библиотека виджетов',
    layout: 'hbox',
    width: 900,
    height: 550,
    closeAction: 'hide',
    items: [
      {
        itemId: 'groups',
        xtype: 'dataview',
        itemTpl: '<span class="item">{groupName}</span>',
        flex: 1
      }, {
        itemId: 'widgets',
        xtype: 'dataview',
        itemTpl: '<span class="item">{name}</span>',
        flex: 1
      }, {
        xtype: 'container',
        layout: 'vbox',
        flex: 2,
        items: [
          {
            itemId: 'description',
            xtype: 'component',
            flex: 1,
            tpl: '<div class="title">{name}</div> <div class="description">{description}</div>'
          }, {
            xtype: 'button',
            text: 'Добавить',
            width: 100,
            handler: 'addWidget'
          }
        ]
      }
    ],
    config: {
      store: null,
      groupsStore: null
    },
    constructor: function() {
      this.callParent(arguments);
      this.setStore(this.makeStore());
      this.setGroupsStore(this.makeStore());
      this.getStore().on('load', this.updateLibrary, this);
      return Report.data.Mediator.bindStore(store, {
        method: 'widgetLibrary'
      });
    },
    updateLibrary: function(store) {
      var collection, groupData, name;
      this.setLoading(true);
      collection = {};
      groupData = [];
      store.each(function(record) {
        var data;
        data = record.getData();
        return collection[data.groupName] = true;
      });
      for (name in collection) {
        groupData.push({
          groupName: name
        });
      }
      this.getGroupsStore.loadData(groupData);
      return this.setLoading(false);
    },
    makeStore: function() {
      return Ext.create('Report.data.MemoryStore', {
        model: 'Report.model.Library'
      });
    },
    addWidget: function() {
      return this.fireEvent('addWidget', this, this.getSelected());
    },
    getSelected: function() {
      return this.down('#widgets').getSelection();
    }
  });

}).call(this);

//# sourceMappingURL=Library.js.map
